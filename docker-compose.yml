version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: miraikakaku-mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-miraikakaku2024}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-miraikakaku}
      MYSQL_USER: ${MYSQL_USER:-miraikakaku_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-miraikakaku_pass}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./miraikakakuapi/functions/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - miraikakaku-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: miraikakaku-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - miraikakaku-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # FastAPI Backend
  api:
    build:
      context: ./miraikakakuapi
      dockerfile: Dockerfile
    container_name: miraikakaku-api
    environment:
      - DATABASE_URL=mysql+pymysql://${MYSQL_USER:-miraikakaku_user}:${MYSQL_PASSWORD:-miraikakaku_pass}@mysql:3306/${MYSQL_DATABASE:-miraikakaku}
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-miraikakaku-super-secret-key-2024}
      - VERTEX_AI_PROJECT_ID=${VERTEX_AI_PROJECT_ID}
      - VERTEX_AI_LOCATION=${VERTEX_AI_LOCATION:-us-central1}
      - VERTEX_AI_ENDPOINT=${VERTEX_AI_ENDPOINT}
      - FRONTEND_URL=http://localhost:3000
      - LOG_LEVEL=${LOG_LEVEL:-info}
    ports:
      - "8000:8000"
    volumes:
      - ./miraikakakuapi/functions:/app
    depends_on:
      - mysql
      - redis
    networks:
      - miraikakaku-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Next.js Frontend
  frontend:
    build:
      context: ./miraikakakufront
      dockerfile: Dockerfile
    container_name: miraikakaku-frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
      - NODE_ENV=production
    ports:
      - "3000:3000"
    depends_on:
      - api
    networks:
      - miraikakaku-network
    restart: unless-stopped

  # Batch Processing
  batch:
    build:
      context: ./miraikakakubatch
      dockerfile: Dockerfile
    container_name: miraikakaku-batch
    environment:
      - DATABASE_URL=mysql+pymysql://${MYSQL_USER:-miraikakaku_user}:${MYSQL_PASSWORD:-miraikakaku_pass}@mysql:3306/${MYSQL_DATABASE:-miraikakaku}
      - REDIS_URL=redis://redis:6379/0
      - VERTEX_AI_PROJECT_ID=${VERTEX_AI_PROJECT_ID}
      - VERTEX_AI_LOCATION=${VERTEX_AI_LOCATION:-us-central1}
      - VERTEX_AI_ENDPOINT=${VERTEX_AI_ENDPOINT}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - ./miraikakakubatch/functions:/app
      - batch_logs:/app/logs
    depends_on:
      - mysql
      - redis
      - api
    networks:
      - miraikakaku-network
    restart: unless-stopped

  # Prometheus (メトリクス収集)
  prometheus:
    image: prom/prometheus:latest
    container_name: miraikakaku-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - miraikakaku-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana (監視ダッシュボード)
  grafana:
    image: grafana/grafana:latest
    container_name: miraikakaku-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - miraikakaku-network
    restart: unless-stopped

  # Nginx (リバースプロキシ)
  nginx:
    image: nginx:alpine
    container_name: miraikakaku-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - api
    networks:
      - miraikakaku-network
    restart: unless-stopped

volumes:
  mysql_data:
  redis_data:
  prometheus_data:
  grafana_data:
  batch_logs:

networks:
  miraikakaku-network:
    driver: bridge