name: E2E Tests - Automated Playwright Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run automated tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of test to run'
        required: true
        default: 'smoke'
        type: choice
        options:
          - smoke
          - core
          - api
          - performance
          - all

jobs:
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        # Test different scenarios
        test-type:
          - ${{ github.event.inputs.test_type || 'smoke' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: miraikakakufront/package-lock.json

      - name: Install dependencies
        working-directory: ./miraikakakufront
        run: npm ci

      - name: Install Playwright Browsers
        working-directory: ./miraikakakufront
        run: npx playwright install chromium

      - name: Setup Python for API
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Python dependencies
        working-directory: ./miraikakakuapi
        run: |
          python -m pip install --upgrade pip
          pip install -r functions/requirements.txt

      - name: Start API Server
        working-directory: ./miraikakakuapi
        run: |
          nohup python3 db_based_api.py &
          sleep 10
        env:
          DATABASE_URL: sqlite:///test.db

      - name: Start Frontend Server
        working-directory: ./miraikakakufront
        run: |
          nohup npm run dev &
          sleep 15

      - name: Wait for servers
        run: |
          # Wait for frontend
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

          # Wait for API (optional)
          timeout 30 bash -c 'until curl -f http://localhost:8080/health 2>/dev/null; do sleep 2; done' || echo "API not available, continuing..."

      - name: Run Smoke Tests
        if: matrix.test-type == 'smoke' || matrix.test-type == 'all'
        working-directory: ./miraikakakufront
        run: npm run test:e2e:smoke
        env:
          CI: true

      - name: Run Core Tests
        if: matrix.test-type == 'core' || matrix.test-type == 'all'
        working-directory: ./miraikakakufront
        run: npm run test:e2e:core
        env:
          CI: true

      - name: Run API Tests
        if: matrix.test-type == 'api' || matrix.test-type == 'all'
        working-directory: ./miraikakakufront
        run: npm run test:e2e:api
        env:
          CI: true

      - name: Run Performance Tests
        if: matrix.test-type == 'performance' || matrix.test-type == 'all'
        working-directory: ./miraikakakufront
        run: npm run test:e2e:performance
        env:
          CI: true

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-results-${{ matrix.test-type }}
          path: |
            miraikakakufront/playwright-report/
            miraikakakufront/test-results/
            miraikakakufront/test-results.json
            miraikakakufront/test-summary.json
          retention-days: 7

      - name: Upload Test Screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-screenshots-${{ matrix.test-type }}
          path: miraikakakufront/test-results/
          retention-days: 3

      - name: Comment Test Results on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            try {
              const summaryPath = path.join('miraikakakufront', 'test-summary.json');
              if (fs.existsSync(summaryPath)) {
                const summary = JSON.parse(fs.readFileSync(summaryPath, 'utf8'));

                const body = `## üé≠ E2E Test Results - ${{ matrix.test-type }}

                **Test Summary:**
                - ‚úÖ **Passed:** ${summary.passed}
                - ‚ùå **Failed:** ${summary.failed}
                - ‚è≠Ô∏è **Skipped:** ${summary.skipped}
                - üìä **Success Rate:** ${summary.successRate}%
                - ‚è±Ô∏è **Duration:** ${Math.round(summary.duration / 1000)}s

                **Status:** ${summary.failed === 0 ? '‚úÖ All tests passed!' : '‚ùå Some tests failed'}
                `;

                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: body
                });
              }
            } catch (error) {
              console.log('Could not post test summary:', error);
            }

  lighthouse-audit:
    name: Performance Audit
    runs-on: ubuntu-latest
    needs: e2e-tests
    if: github.event.inputs.test_type == 'performance' || github.event.inputs.test_type == 'all'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: miraikakakufront/package-lock.json

      - name: Install dependencies
        working-directory: ./miraikakakufront
        run: npm ci

      - name: Build application
        working-directory: ./miraikakakufront
        run: npm run build

      - name: Start production server
        working-directory: ./miraikakakufront
        run: |
          nohup npm start &
          sleep 15

      - name: Run Lighthouse Audit
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: '.github/lighthouse/lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'schedule'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './miraikakakufront'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'