name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Frontend Tests
  frontend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./miraikakakufront
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './miraikakakufront/package-lock.json'

    - name: Install dependencies
      run: npm ci

    - name: Run lint
      run: npm run lint

    - name: Run type check
      run: npx tsc --noEmit

    - name: Run tests
      run: npm test -- --coverage --watchAll=false

    - name: Build application
      run: npm run build
      env:
        NEXT_PUBLIC_API_BASE_URL: http://localhost:8001
        NEXT_PUBLIC_DATAFEED_URL: http://localhost:8000

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./miraikakakufront/coverage/lcov.info
        flags: frontend

  # Backend Tests
  backend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./miraikakakuapi/functions
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: test_miraikakaku
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ../requirements.txt
        pip install pytest pytest-cov pytest-asyncio

    - name: Run tests
      run: pytest --cov=. --cov-report=xml --cov-report=term
      env:
        DATABASE_URL: mysql+pymysql://root:test_password@localhost:3306/test_miraikakaku
        REDIS_URL: redis://localhost:6379/0
        JWT_SECRET_KEY: test-secret-key
        VERTEX_AI_PROJECT_ID: test-project

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./miraikakakuapi/functions/coverage.xml
        flags: backend

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Docker Build and Push
  docker-build:
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: gcr.io
        username: _json_key
        password: ${{ secrets.GCP_SA_KEY }}

    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: ./miraikakakuapi
        push: true
        tags: gcr.io/${{ secrets.GCP_PROJECT_ID }}/miraikakaku-api:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./miraikakakufront
        push: true
        tags: gcr.io/${{ secrets.GCP_PROJECT_ID }}/miraikakaku-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Data Feed image
      uses: docker/build-push-action@v5
      with:
        context: ./miraikakakudatafeed
        push: true
        tags: gcr.io/${{ secrets.GCP_PROJECT_ID }}/miraikakaku-datafeed:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Batch image
      uses: docker/build-push-action@v5
      with:
        context: ./miraikakakubatch
        push: true
        tags: gcr.io/${{ secrets.GCP_PROJECT_ID }}/miraikakaku-batch:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to GCP
  deploy:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Deploy API to Cloud Run
      id: deploy-api
      run: |
        gcloud run deploy miraikakaku-api \
          --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/miraikakaku-api:${{ github.sha }} \
          --platform managed \
          --region us-central1 \
          --allow-unauthenticated \
          --memory 2Gi \
          --cpu 2 \
          --min-instances 1 \
          --max-instances 10 \
          --set-env-vars="DATABASE_URL=${{ secrets.DATABASE_URL }},JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }},VERTEX_AI_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}" \
          --format="value(status.url)" > api_url.txt
        echo "api_url=$(cat api_url.txt)" >> $GITHUB_OUTPUT

    - name: Deploy Data Feed Service
      id: deploy-datafeed
      run: |
        gcloud run deploy miraikakaku-datafeed \
          --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/miraikakaku-datafeed:${{ github.sha }} \
          --platform managed \
          --region us-central1 \
          --allow-unauthenticated \
          --memory 1Gi \
          --cpu 1 \
          --max-instances 3 \
          --format="value(status.url)" > datafeed_url.txt
        echo "datafeed_url=$(cat datafeed_url.txt)" >> $GITHUB_OUTPUT

    - name: Deploy Frontend to Cloud Run
      run: |
        gcloud run deploy miraikakaku-frontend \
          --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/miraikakaku-frontend:${{ github.sha }} \
          --platform managed \
          --region us-central1 \
          --allow-unauthenticated \
          --memory 1Gi \
          --cpu 1 \
          --max-instances 5 \
          --set-env-vars="NEXT_PUBLIC_API_URL=${{ steps.deploy-api.outputs.api_url }},NEXT_PUBLIC_DATAFEED_URL=${{ steps.deploy-datafeed.outputs.datafeed_url }}"

    - name: Deploy Batch to Cloud Functions
      run: |
        gcloud functions deploy miraikakaku-batch \
          --source ./miraikakakubatch/functions \
          --runtime python311 \
          --trigger-http \
          --memory 2048MB \
          --timeout 540s \
          --region us-central1 \
          --set-env-vars="DATABASE_URL=${{ secrets.DATABASE_URL }},VERTEX_AI_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}"