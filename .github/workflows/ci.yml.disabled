name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: miraikakaku_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        cd miraikakakuapi
        pip install -r requirements.txt

    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/miraikakaku_test" >> $GITHUB_ENV
        echo "TESTING=true" >> $GITHUB_ENV
        echo "LOG_LEVEL=WARNING" >> $GITHUB_ENV

    - name: Run tests
      run: |
        cd miraikakakuapi
        python -m pytest tests/ -v --tb=short --cov=functions --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./miraikakakuapi/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy

    - name: Run flake8
      run: |
        cd miraikakakuapi
        flake8 functions/ tests/ --max-line-length=100 --extend-ignore=E203,W503

    - name: Check code formatting with black
      run: |
        cd miraikakakuapi
        black --check functions/ tests/ --line-length=100

    - name: Check import sorting with isort
      run: |
        cd miraikakakuapi
        isort --check-only functions/ tests/

  frontend-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: miraikakakufront/package-lock.json

    - name: Install dependencies
      run: |
        cd miraikakakufront
        npm ci

    - name: Run linting
      run: |
        cd miraikakakufront
        npm run lint

    - name: Run type checking
      run: |
        cd miraikakakufront
        npx tsc --noEmit

    - name: Build project
      run: |
        cd miraikakakufront
        npm run build
      env:
        NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL || 'http://localhost:8080' }}

    - name: Run E2E tests
      run: |
        cd miraikakakufront
        npm run test:e2e:ci
      continue-on-error: true

  deploy:
    runs-on: ubuntu-latest
    needs: [test, lint, frontend-test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Configure Docker for GCR
      run: gcloud auth configure-docker

    - name: Build and push API image
      run: |
        cd miraikakakuapi
        docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/miraikakaku-api:${{ github.sha }} .
        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/miraikakaku-api:${{ github.sha }}

    - name: Build and push Frontend image
      run: |
        cd miraikakakufront
        docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/miraikakaku-front:${{ github.sha }} \
          --build-arg NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }} .
        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/miraikakaku-front:${{ github.sha }}

    - name: Deploy to Cloud Run
      run: |
        # Deploy API
        gcloud run deploy miraikakaku-api \
          --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/miraikakaku-api:${{ github.sha }} \
          --platform managed \
          --region us-central1 \
          --allow-unauthenticated \
          --memory=4Gi \
          --cpu=2 \
          --timeout=300 \
          --max-instances=10

        # Deploy Frontend
        gcloud run deploy miraikakaku-front \
          --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/miraikakaku-front:${{ github.sha }} \
          --platform managed \
          --region us-central1 \
          --allow-unauthenticated \
          --memory=2Gi \
          --cpu=1 \
          --timeout=60 \
          --max-instances=5

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'