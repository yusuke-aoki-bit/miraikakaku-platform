name: Production Deployment Pipeline

on:
  push:
    branches: [main]
    paths:
      - 'miraikakakuapi/**'
      - 'miraikakakubatch/**'
      - 'miraikakakufront/**'
      - 'shared/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      force_deploy:
        description: 'Force deployment (skip some checks)'
        required: false
        default: false
        type: boolean

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
  REGISTRY: gcr.io

jobs:
  # Quality Gates
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.quality-check.outputs.should-deploy }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Run API tests
        working-directory: ./miraikakakuapi
        run: |
          pip install -r functions/requirements.txt
          pip install pytest pytest-cov
          pytest tests/ --cov=functions --cov-fail-under=80

      - name: Run Batch tests
        working-directory: ./miraikakakubatch
        run: |
          pip install -r functions/requirements.txt
          pip install pytest pytest-cov
          pytest tests/ --cov=functions --cov-fail-under=70

      - name: Install Frontend dependencies
        working-directory: ./miraikakakufront
        run: npm ci

      - name: Run Frontend lint
        working-directory: ./miraikakakufront
        run: npm run lint

      - name: Run Frontend build
        working-directory: ./miraikakakufront
        run: npm run build

      - name: Security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Quality gate decision
        id: quality-check
        run: |
          if [[ "${{ github.event.inputs.force_deploy }}" == "true" ]] || [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  # Build and Push Docker Images
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: quality-gates
    if: needs.quality-gates.outputs.should-deploy == 'true'

    strategy:
      matrix:
        service: [api, batch, frontend]

    outputs:
      api-image: ${{ steps.image-tags.outputs.api-image }}
      batch-image: ${{ steps.image-tags.outputs.batch-image }}
      frontend-image: ${{ steps.image-tags.outputs.frontend-image }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure Docker
        run: gcloud auth configure-docker

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push images
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          SHORT_SHA=${GITHUB_SHA::8}
          TAG="${TIMESTAMP}-${SHORT_SHA}"

          case "${{ matrix.service }}" in
            api)
              IMAGE_NAME="${REGISTRY}/${GCP_PROJECT_ID}/miraikakaku-api:${TAG}"
              docker build -t ${IMAGE_NAME} ./miraikakakuapi
              docker push ${IMAGE_NAME}
              echo "api-image=${IMAGE_NAME}" >> $GITHUB_ENV
              ;;
            batch)
              IMAGE_NAME="${REGISTRY}/${GCP_PROJECT_ID}/miraikakaku-batch:${TAG}"
              docker build -t ${IMAGE_NAME} ./miraikakakubatch
              docker push ${IMAGE_NAME}
              echo "batch-image=${IMAGE_NAME}" >> $GITHUB_ENV
              ;;
            frontend)
              IMAGE_NAME="${REGISTRY}/${GCP_PROJECT_ID}/miraikakaku-frontend:${TAG}"
              docker build -t ${IMAGE_NAME} ./miraikakakufront
              docker push ${IMAGE_NAME}
              echo "frontend-image=${IMAGE_NAME}" >> $GITHUB_ENV
              ;;
          esac

      - name: Set image tags output
        id: image-tags
        run: |
          echo "api-image=${{ env.api-image }}" >> $GITHUB_OUTPUT
          echo "batch-image=${{ env.batch-image }}" >> $GITHUB_OUTPUT
          echo "frontend-image=${{ env.frontend-image }}" >> $GITHUB_OUTPUT

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-gates, build-images]
    if: needs.quality-gates.outputs.should-deploy == 'true'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Deploy to Cloud Run (API)
        run: |
          gcloud run deploy miraikakaku-api-staging \
            --image ${{ needs.build-images.outputs.api-image }} \
            --platform managed \
            --region us-central1 \
            --allow-unauthenticated \
            --memory 512Mi \
            --cpu 1 \
            --min-instances 0 \
            --max-instances 10 \
            --set-env-vars "NODE_ENV=staging"

      - name: Deploy to Cloud Run (Frontend)
        run: |
          gcloud run deploy miraikakaku-frontend-staging \
            --image ${{ needs.build-images.outputs.frontend-image }} \
            --platform managed \
            --region us-central1 \
            --allow-unauthenticated \
            --memory 256Mi \
            --cpu 1 \
            --min-instances 0 \
            --max-instances 5

      - name: Run smoke tests
        run: |
          # Wait for services to be ready
          sleep 30

          # Get service URLs
          API_URL=$(gcloud run services describe miraikakaku-api-staging --region=us-central1 --format='value(status.url)')
          FRONTEND_URL=$(gcloud run services describe miraikakaku-frontend-staging --region=us-central1 --format='value(status.url)')

          # Basic health checks
          curl -f "${API_URL}/health" || exit 1
          curl -f "${FRONTEND_URL}" || exit 1

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-gates, build-images, deploy-staging]
    if: needs.quality-gates.outputs.should-deploy == 'true' && (github.event.inputs.environment == 'production' || github.ref == 'refs/heads/main')
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Blue-Green Deployment (API)
        run: |
          # Deploy to new version
          gcloud run deploy miraikakaku-api-prod-new \
            --image ${{ needs.build-images.outputs.api-image }} \
            --platform managed \
            --region us-central1 \
            --no-allow-unauthenticated \
            --memory 1Gi \
            --cpu 2 \
            --min-instances 1 \
            --max-instances 20 \
            --set-env-vars "NODE_ENV=production"

          # Health check new version
          NEW_URL=$(gcloud run services describe miraikakaku-api-prod-new --region=us-central1 --format='value(status.url)')
          curl -f "${NEW_URL}/health" || exit 1

          # Switch traffic (blue-green switch)
          gcloud run services update-traffic miraikakaku-api-prod --to-revisions=LATEST=100

      - name: Deploy Frontend to Production
        run: |
          gcloud run deploy miraikakaku-frontend-prod \
            --image ${{ needs.build-images.outputs.frontend-image }} \
            --platform managed \
            --region us-central1 \
            --allow-unauthenticated \
            --memory 512Mi \
            --cpu 1 \
            --min-instances 1 \
            --max-instances 10

      - name: Update batch jobs
        run: |
          # Update Cloud Run Jobs or Batch jobs
          gcloud run jobs replace batch-job-config.yaml

  # Notify deployment status
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()

    steps:
      - name: Notify Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Deployment Status: ${{ job.status }}
            Environment: ${{ github.event.inputs.environment || 'staging' }}
            Commit: ${{ github.sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}