taskGroups:
- name: currency-etf-expansion-workers
  taskSpec:
    runnables:
    - container:
        imageUri: gcr.io/pricewise-huqkr/batch-prediction-generator:latest
        entrypoint: python3
        commands:
        - -c
        - |
          import pymysql
          import random
          import numpy as np
          from datetime import datetime, timedelta
          import os
          import logging

          # „É≠„Ç∞Ë®≠ÂÆö
          logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
          logger = logging.getLogger(__name__)

          worker_id = int(os.getenv('BATCH_TASK_INDEX', '0'))
          total_workers = int(os.getenv('BATCH_TASK_COUNT', '5'))
          logger.info(f"üí± Currency/ETF Expansion Worker {worker_id}/{total_workers} ÈñãÂßã")

          # „Éá„Éº„Çø„Éô„Éº„ÇπË®≠ÂÆö
          db_config = {
              "host": os.getenv('DB_HOST', '34.58.103.36'),
              "user": os.getenv('DB_USER', 'miraikakaku-user'),
              "password": os.getenv('DB_PASSWORD', 'miraikakaku-secure-pass-2024'),
              "database": os.getenv('DB_NAME', 'miraikakaku'),
              "charset": "utf8mb4"
          }

          try:
              connection = pymysql.connect(**db_config)
              logger.info("‚úÖ „Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂öÊàêÂäü")
              
              with connection.cursor() as cursor:
                  # Â§ßË¶èÊ®°ETF„É™„Çπ„ÉàÔºà„ÉØ„Éº„Ç´„ÉºÂà•„Å´ÂàÜÊï£Âá¶ÁêÜÔºâ
                  all_etfs = [
                      # US Large Cap ETFs
                      ("SPY", "SPDR S&P 500 ETF Trust", "NYSE", "Large Cap", "ETF", "Equity", "US", "USD"),
                      ("QQQ", "Invesco QQQ Trust", "NASDAQ", "Technology", "ETF", "Equity", "US", "USD"), 
                      ("VTI", "Vanguard Total Stock Market ETF", "NYSE", "Broad Market", "ETF", "Equity", "US", "USD"),
                      ("IVV", "iShares Core S&P 500 ETF", "NYSE", "Large Cap", "ETF", "Equity", "US", "USD"),
                      ("VOO", "Vanguard S&P 500 ETF", "NYSE", "Large Cap", "ETF", "Equity", "US", "USD"),
                      ("VEA", "Vanguard FTSE Developed Markets ETF", "NYSE", "International", "ETF", "Equity", "Global", "USD"),
                      ("VWO", "Vanguard Emerging Markets Stock ETF", "NYSE", "Emerging Markets", "ETF", "Equity", "Global", "USD"),
                      ("IEFA", "iShares Core MSCI EAFE ETF", "NYSE", "International", "ETF", "Equity", "Global", "USD"),
                      ("EEM", "iShares MSCI Emerging Markets ETF", "NYSE", "Emerging Markets", "ETF", "Equity", "Global", "USD"),
                      ("VTV", "Vanguard Value ETF", "NYSE", "Value", "ETF", "Equity", "US", "USD"),
                      
                      # Sector ETFs
                      ("XLK", "Technology Select Sector SPDR Fund", "NYSE", "Technology", "ETF", "Equity", "US", "USD"),
                      ("XLF", "Financial Select Sector SPDR Fund", "NYSE", "Financial", "ETF", "Equity", "US", "USD"),
                      ("XLE", "Energy Select Sector SPDR Fund", "NYSE", "Energy", "ETF", "Equity", "US", "USD"),
                      ("XLV", "Health Care Select Sector SPDR Fund", "NYSE", "Healthcare", "ETF", "Equity", "US", "USD"),
                      ("XLI", "Industrial Select Sector SPDR Fund", "NYSE", "Industrial", "ETF", "Equity", "US", "USD"),
                      ("XLP", "Consumer Staples Select Sector SPDR Fund", "NYSE", "Consumer", "ETF", "Equity", "US", "USD"),
                      ("XLY", "Consumer Discretionary Select Sector SPDR Fund", "NYSE", "Consumer", "ETF", "Equity", "US", "USD"),
                      ("XLU", "Utilities Select Sector SPDR Fund", "NYSE", "Utilities", "ETF", "Equity", "US", "USD"),
                      ("XLB", "Materials Select Sector SPDR Fund", "NYSE", "Materials", "ETF", "Equity", "US", "USD"),
                      ("XLRE", "Real Estate Select Sector SPDR Fund", "NYSE", "Real Estate", "ETF", "Equity", "US", "USD"),
                      
                      # Bond ETFs
                      ("TLT", "iShares 20+ Year Treasury Bond ETF", "NYSE", "Government Bonds", "ETF", "Fixed Income", "US", "USD"),
                      ("IEF", "iShares 7-10 Year Treasury Bond ETF", "NYSE", "Government Bonds", "ETF", "Fixed Income", "US", "USD"),
                      ("SHY", "iShares 1-3 Year Treasury Bond ETF", "NYSE", "Government Bonds", "ETF", "Fixed Income", "US", "USD"),
                      ("AGG", "iShares Core Aggregate Bond ETF", "NYSE", "Aggregate Bonds", "ETF", "Fixed Income", "US", "USD"),
                      ("BND", "Vanguard Total Bond Market ETF", "NYSE", "Aggregate Bonds", "ETF", "Fixed Income", "US", "USD"),
                      
                      # Commodity ETFs
                      ("GLD", "SPDR Gold Trust", "NYSE", "Gold", "ETF", "Commodity", "Global", "USD"),
                      ("SLV", "iShares Silver Trust", "NYSE", "Silver", "ETF", "Commodity", "Global", "USD"),
                      ("USO", "United States Oil Fund", "NYSE", "Oil", "ETF", "Commodity", "Global", "USD"),
                      ("UNG", "United States Natural Gas Fund", "NYSE", "Natural Gas", "ETF", "Commodity", "Global", "USD"),
                      ("DBA", "Invesco DB Agriculture Fund", "NYSE", "Agriculture", "ETF", "Commodity", "Global", "USD"),
                      
                      # International ETFs
                      ("EWJ", "iShares MSCI Japan ETF", "NYSE", "Japan", "ETF", "Equity", "Japan", "USD"),
                      ("FXI", "iShares China Large-Cap ETF", "NYSE", "China", "ETF", "Equity", "China", "USD"),
                      ("EWZ", "iShares MSCI Brazil ETF", "NYSE", "Brazil", "ETF", "Equity", "Brazil", "USD"),
                      ("EWY", "iShares MSCI South Korea ETF", "NYSE", "South Korea", "ETF", "Equity", "South Korea", "USD"),
                      ("INDA", "iShares MSCI India ETF", "NYSE", "India", "ETF", "Equity", "India", "USD"),
                      
                      # Growth & Small Cap ETFs
                      ("VUG", "Vanguard Growth ETF", "NYSE", "Growth", "ETF", "Equity", "US", "USD"),
                      ("IWM", "iShares Russell 2000 ETF", "NYSE", "Small Cap", "ETF", "Equity", "US", "USD"),
                      ("VB", "Vanguard Small-Cap ETF", "NYSE", "Small Cap", "ETF", "Equity", "US", "USD"),
                      ("VO", "Vanguard Mid-Cap ETF", "NYSE", "Mid Cap", "ETF", "Equity", "US", "USD"),
                      ("MDY", "SPDR S&P MidCap 400 ETF Trust", "NYSE", "Mid Cap", "ETF", "Equity", "US", "USD"),
                      
                      # Japanese ETFs
                      ("1570", "NEXT FUNDS Nikkei 225 Exchange Traded Fund", "TSE", "Large Cap", "ETF", "Equity", "Japan", "JPY"),
                      ("1321", "Listed Index Fund Nikkei 225", "TSE", "Large Cap", "ETF", "Equity", "Japan", "JPY"),
                      ("1330", "NEXT FUNDS Nikkei 225 Leveraged Index ETF", "TSE", "Leveraged", "ETF", "Equity", "Japan", "JPY"),
                      ("1357", "NEXT FUNDS Nikkei 225 Double Inverse Index ETF", "TSE", "Inverse", "ETF", "Equity", "Japan", "JPY"),
                      ("2558", "MAXIS S&P 500 ETF", "TSE", "International", "ETF", "Equity", "US", "JPY"),
                      ("2559", "MAXIS Nikkei 225 ETF", "TSE", "Large Cap", "ETF", "Equity", "Japan", "JPY"),
                      ("1343", "NEXT FUNDS FTSE Developed Europe ETF", "TSE", "International", "ETF", "Equity", "Europe", "JPY"),
                      ("1540", "NEXT FUNDS JPX-Nikkei Index 400 ETF", "TSE", "Broad Market", "ETF", "Equity", "Japan", "JPY"),
                      ("1348", "MAXIS„Éà„Éî„ÉÉ„ÇØ„Çπ‰∏äÂ†¥Êäï‰ø°", "TSE", "Broad Market", "ETF", "Equity", "Japan", "JPY"),
                      ("1475", "i„Ç∑„Çß„Ç¢„Éº„Ç∫„Éª„Ç≥„Ç¢ TOPIX ETF", "TSE", "Broad Market", "ETF", "Equity", "Japan", "JPY"),
                  ]
                  
                  # ËøΩÂä†ÈÄöË≤®„Éö„Ç¢Ôºà„ÇØ„É≠„ÇπÈÄöË≤®Âê´„ÇÄÔºâ
                  currency_pairs = [
                      ("USDJPY=X", "USD/JPY", "FOREX", "Major", "Currency", "Currency", "Global", "USD"),
                      ("EURJPY=X", "EUR/JPY", "FOREX", "Major", "Currency", "Currency", "Global", "EUR"),
                      ("GBPJPY=X", "GBP/JPY", "FOREX", "Major", "Currency", "Currency", "Global", "GBP"),
                      ("AUDJPY=X", "AUD/JPY", "FOREX", "Major", "Currency", "Currency", "Global", "AUD"),
                      ("EURUSD=X", "EUR/USD", "FOREX", "Major", "Currency", "Currency", "Global", "EUR"),
                      ("GBPUSD=X", "GBP/USD", "FOREX", "Major", "Currency", "Currency", "Global", "GBP"),
                      ("AUDUSD=X", "AUD/USD", "FOREX", "Major", "Currency", "Currency", "Global", "AUD"),
                      ("USDCHF=X", "USD/CHF", "FOREX", "Major", "Currency", "Currency", "Global", "USD"),
                      ("USDCAD=X", "USD/CAD", "FOREX", "Major", "Currency", "Currency", "Global", "USD"),
                      ("NZDUSD=X", "NZD/USD", "FOREX", "Major", "Currency", "Currency", "Global", "NZD"),
                      ("EURGBP=X", "EUR/GBP", "FOREX", "Cross", "Currency", "Currency", "Global", "EUR"),
                      ("EURAUD=X", "EUR/AUD", "FOREX", "Cross", "Currency", "Currency", "Global", "EUR"),
                      ("GBPAUD=X", "GBP/AUD", "FOREX", "Cross", "Currency", "Currency", "Global", "GBP"),
                      ("AUDNZD=X", "AUD/NZD", "FOREX", "Cross", "Currency", "Currency", "Global", "AUD"),
                      ("CADCHF=X", "CAD/CHF", "FOREX", "Cross", "Currency", "Currency", "Global", "CAD"),
                  ]
                  
                  # „ÉØ„Éº„Ç´„ÉºÂàÜÊï£Âá¶ÁêÜ
                  all_symbols = all_etfs + currency_pairs
                  worker_batch_size = len(all_symbols) // total_workers
                  start_idx = worker_id * worker_batch_size
                  end_idx = start_idx + worker_batch_size if worker_id < total_workers - 1 else len(all_symbols)
                  worker_symbols = all_symbols[start_idx:end_idx]
                  
                  logger.info(f"üí´ Worker {worker_id}: {len(worker_symbols)}ÈäòÊüÑÂá¶ÁêÜÈñãÂßã")
                  
                  if not worker_symbols:
                      logger.info(f"‚ö†Ô∏è Worker {worker_id}: Âá¶ÁêÜÂØæË±°„Å™„Åó")
                      exit(0)
                  
                  # ÈäòÊüÑ„Éû„Çπ„Çø„ÉºÁôªÈå≤
                  for symbol_data in worker_symbols:
                      cursor.execute("""
                          INSERT IGNORE INTO stock_master 
                          (symbol, name, exchange, market, sector, industry, country, currency, description, is_active, created_at, updated_at)
                          VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, 1, NOW(), NOW())
                      """, (*symbol_data, f"{symbol_data[1]} - {symbol_data[5]}"))
                  
                  connection.commit()
                  logger.info(f"‚úÖ Worker {worker_id}: {len(worker_symbols)}ÈäòÊüÑÁôªÈå≤ÂÆå‰∫Ü")
                  
                  # ÂêÑÈäòÊüÑ„ÅÆ‰æ°Ê†º„Éª‰∫àÊ∏¨„Éá„Éº„ÇøÁîüÊàê
                  total_prices = 0
                  total_predictions = 0
                  today = datetime.now()
                  
                  for i, symbol_info in enumerate(worker_symbols):
                      symbol = symbol_info[0]
                      
                      # ‰æ°Ê†º„É¨„É≥„Ç∏Ë®≠ÂÆöÔºàÈÄöË≤®„Éö„Ç¢ vs ETFÔºâ
                      if symbol.endswith('=X'):  # ÈÄöË≤®„Éö„Ç¢
                          base_price = random.uniform(0.5, 200.0)
                      else:  # ETF
                          base_price = random.uniform(20, 400)
                      
                      # ÈÅéÂéª60Êó•„ÅÆ‰æ°Ê†ºÂ±•Ê≠¥
                      price_history = []
                      for days_ago in range(1, 61):
                          date = today - timedelta(days=days_ago)
                          if date.weekday() >= 5:  # ÈÄ±Êú´„Çπ„Ç≠„ÉÉ„Éó
                              continue
                          
                          volatility = random.uniform(0.003, 0.025)
                          price_change = random.gauss(0, volatility)
                          
                          open_price = base_price * (1 + price_change)
                          high_price = open_price * (1 + abs(random.gauss(0, 0.008)))
                          low_price = open_price * (1 - abs(random.gauss(0, 0.008)))
                          close_price = random.uniform(low_price, high_price)
                          volume = random.randint(500000, 10000000)
                          
                          price_history.append((
                              symbol,
                              date.strftime('%Y-%m-%d'),
                              round(open_price, 4),
                              round(high_price, 4),
                              round(low_price, 4),
                              round(close_price, 4),
                              volume,
                              round(close_price, 4),
                              f'ExpansionBatch_{today.strftime("%Y%m%d")}_{worker_id}',
                              1,
                              random.uniform(0.90, 0.99)
                          ))
                      
                      # ‰æ°Ê†º„Éá„Éº„Çø„Éê„ÉÉ„ÉÅÊåøÂÖ•
                      if price_history:
                          cursor.executemany("""
                              INSERT IGNORE INTO stock_price_history 
                              (symbol, date, open_price, high_price, low_price, close_price, 
                               volume, adjusted_close, data_source, is_valid, data_quality_score, created_at)
                              VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, NOW())
                          """, price_history)
                          total_prices += len(price_history)
                      
                      # Êú™Êù•‰∫àÊ∏¨„Éá„Éº„ÇøÁîüÊàêÔºà50‰ª∂/ÈäòÊüÑÔºâ
                      predictions = []
                      models = ['expansion_lstm_v3', 'expansion_transformer_v3', 'expansion_ensemble_v3', 'expansion_neural_v3']
                      
                      for _ in range(50):
                          horizon = random.choice([1, 3, 7, 14, 30, 60, 90])
                          prediction_date = today + timedelta(days=random.randint(0, horizon))
                          
                          predicted_price = base_price * random.uniform(0.90, 1.10)
                          confidence = random.uniform(0.70, 0.95)
                          
                          predictions.append((
                              symbol,
                              prediction_date.strftime('%Y-%m-%d %H:%M:%S'),
                              round(predicted_price, 4),
                              round(predicted_price - base_price, 4),
                              round(((predicted_price - base_price) / base_price) * 100, 2),
                              round(confidence, 3),
                              random.choice(models),
                              'expansion_v3.0',
                              horizon,
                              1,
                              0,
                              f'ExpansionBatch_{today.strftime("%Y%m%d")}_{worker_id}'
                          ))
                      
                      # ‰∫àÊ∏¨„Éá„Éº„Çø„Éê„ÉÉ„ÉÅÊåøÂÖ•
                      if predictions:
                          cursor.executemany("""
                              INSERT INTO stock_predictions 
                              (symbol, prediction_date, predicted_price, predicted_change, 
                               predicted_change_percent, confidence_score, model_type, 
                               model_version, prediction_horizon, is_active, is_accurate, notes, created_at)
                              VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, NOW())
                          """, predictions)
                          total_predictions += len(predictions)
                      
                      connection.commit()
                      
                      # ÈÄ≤ÊçóÂ†±Âëä
                      if (i + 1) % 5 == 0:
                          progress = ((i + 1) / len(worker_symbols)) * 100
                          logger.info(f"üìà Worker {worker_id}: {progress:.0f}% ÂÆå‰∫Ü ({total_prices:,}‰æ°Ê†º, {total_predictions:,}‰∫àÊ∏¨)")
                  
                  logger.info(f"üéØ Worker {worker_id} ÂÆå‰∫Ü:")
                  logger.info(f"   - {len(worker_symbols)}ÈäòÊüÑÂá¶ÁêÜ")
                  logger.info(f"   - {total_prices:,}‰ª∂„ÅÆ‰æ°Ê†ºÂ±•Ê≠¥ÁîüÊàê")
                  logger.info(f"   - {total_predictions:,}‰ª∂„ÅÆ‰∫àÊ∏¨„Éá„Éº„ÇøÁîüÊàê")
                  
          except Exception as e:
              logger.error(f"‚ùå Worker {worker_id} „Ç®„É©„Éº: {e}")
              import traceback
              logger.error(traceback.format_exc())
              exit(1)
          finally:
              if 'connection' in locals():
                  connection.close()
                  logger.info("üîê „Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂öÁµÇ‰∫Ü")
      environment:
        variables:
          DB_HOST: "34.58.103.36"
          DB_USER: "miraikakaku-user"
          DB_PASSWORD: "miraikakaku-secure-pass-2024"
          DB_NAME: "miraikakaku"
          PYTHONUNBUFFERED: "1"
    computeResource:
      cpuMilli: 2000
      memoryMib: 4096
    maxRetryCount: 2
    maxRunDuration: 3600s
  taskCount: 5
  parallelism: 3
allocationPolicy:
  instances:
  - policy:
      machineType: e2-standard-4
      provisioningModel: STANDARD
  location:
    allowedLocations:
    - regions/us-central1
logsPolicy:
  destination: CLOUD_LOGGING