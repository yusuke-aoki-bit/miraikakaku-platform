apiVersion: batch/v1
kind: Job
metadata:
  name: training-data-batch
spec:
  taskGroups:
  - name: training-data-workers
    taskSpec:
      runnables:
      - script:
          text: |
            #!/bin/bash
            set -e
            
            echo "🚀 訓練データ生成バッチ開始"
            
            # Python環境セットアップ
            apt-get update && apt-get install -y python3-pip python3-dev default-libmysqlclient-dev
            pip3 install pymysql pandas numpy scikit-learn
            
            # データ生成スクリプト実行
            python3 << 'EOF'
            import pymysql
            import pandas as pd
            import numpy as np
            import random
            from datetime import datetime, timedelta
            import os
            
            print(f"Pod {os.getenv('BATCH_NODE_INDEX', '0')} 開始")
            
            db_config = {
                "host": "34.58.103.36",
                "user": "miraikakaku-user",
                "password": "miraikakaku-secure-pass-2024",
                "database": "miraikakaku",
                "charset": "utf8mb4"
            }
            
            connection = pymysql.connect(**db_config)
            
            try:
                with connection.cursor() as cursor:
                    # 処理対象銘柄取得
                    pod_index = int(os.getenv('BATCH_NODE_INDEX', '0'))
                    batch_size = 100
                    offset = pod_index * batch_size
                    
                    cursor.execute("""
                        SELECT symbol, name, market FROM stock_master 
                        WHERE is_active = 1 
                        ORDER BY symbol
                        LIMIT %s OFFSET %s
                    """, (batch_size, offset))
                    
                    stocks = cursor.fetchall()
                    print(f"処理対象: {len(stocks)}銘柄")
                    
                    for stock in stocks[:10]:  # 最初の10銘柄を処理
                        symbol = stock[0]
                        print(f"処理中: {symbol}")
                        
                        # 簡易予測データ生成
                        for i in range(10):
                            prediction_date = datetime.now() - timedelta(days=random.randint(0, 30))
                            predicted_price = 100 + random.uniform(-20, 20)
                            confidence = random.uniform(0.6, 0.9)
                            
                            cursor.execute("""
                                INSERT INTO stock_predictions 
                                (symbol, prediction_date, predicted_price, confidence_score, 
                                 model_type, model_version, prediction_horizon, is_active, created_at)
                                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, NOW())
                            """, (symbol, prediction_date, predicted_price, confidence, 
                                  'batch_simple', 'v1.0', 7, 1))
                        
                        connection.commit()
                        print(f"✅ {symbol}: 10件の予測データ生成完了")
                    
                    print(f"Pod {pod_index} 完了")
                    
            except Exception as e:
                print(f"エラー: {e}")
            finally:
                connection.close()
            EOF
            
            echo "✅ バッチ処理完了"
      computeResource:
        cpuMilli: 1000
        memoryMib: 2048
      maxRetryCount: 1
      maxRunDuration: 1800s
    taskCount: 3
    parallelism: 3
  allocationPolicy:
    instances:
    - policy:
        machineType: e2-medium
        provisioningModel: SPOT
    location:
      allowedLocations:
      - regions/us-central1
  logsPolicy:
    destination: CLOUD_LOGGING