taskGroups:
  - taskSpec:
      runnables:
        - container:
            imageUri: "us-central1-docker.pkg.dev/pricewise-huqkr/miraikakaku-docker/batch-stable:latest"
            entrypoint: "/bin/bash"
            commands:
              - "-c"
              - |
                echo "🔍 stock_predictionsテーブル構造確認..."
                cd /app
                
                pip install psycopg2-binary
                
                python3 -c "
                import psycopg2
                
                db_config = {
                    'host': '34.173.9.214',
                    'user': 'miraikakaku-user',
                    'password': 'miraikakaku-secure-pass-2024',
                    'database': 'miraikakaku',
                    'port': 5432
                }
                
                try:
                    connection = psycopg2.connect(**db_config)
                    cursor = connection.cursor()
                    
                    # テーブル構造確認
                    cursor.execute('''
                        SELECT column_name, data_type, is_nullable, column_default
                        FROM information_schema.columns 
                        WHERE table_name = 'stock_predictions' 
                        AND table_schema = 'public'
                        ORDER BY ordinal_position
                    ''')
                    
                    columns = cursor.fetchall()
                    print('📋 stock_predictionsテーブル構造:')
                    print('=' * 80)
                    for col in columns:
                        name, dtype, nullable, default = col
                        default_str = f' DEFAULT {default}' if default else ''
                        nullable_str = 'NULL' if nullable == 'YES' else 'NOT NULL'
                        print(f'{name:25} | {dtype:15} | {nullable_str:8} {default_str}')
                    
                    print(f'\\n📊 総カラム数: {len(columns)}')
                    
                    # サンプルデータがあるかチェック
                    cursor.execute('SELECT COUNT(*) FROM stock_predictions LIMIT 1')
                    count = cursor.fetchone()[0]
                    print(f'📈 既存データ件数: {count}')
                    
                    if count > 0:
                        cursor.execute('SELECT * FROM stock_predictions LIMIT 3')
                        samples = cursor.fetchall()
                        print('\\n🔍 サンプルデータ:')
                        for i, sample in enumerate(samples, 1):
                            print(f'  {i}. {sample[:5]}...')  # 最初の5列のみ表示
                    
                    # 制約情報の確認
                    cursor.execute('''
                        SELECT constraint_name, constraint_type
                        FROM information_schema.table_constraints 
                        WHERE table_name = 'stock_predictions'
                        AND table_schema = 'public'
                    ''')
                    constraints = cursor.fetchall()
                    print(f'\\n🔒 制約情報 ({len(constraints)}件):')
                    for name, ctype in constraints:
                        print(f'  - {name}: {ctype}')
                    
                    connection.close()
                    print('\\n✅ テーブル構造確認完了')
                    
                except Exception as e:
                    print(f'❌ エラー: {e}')
                    import traceback
                    traceback.print_exc()
                "
      computeResource:
        cpuMilli: "1000"
        memoryMib: "1024"
      maxRetryCount: 1
      maxRunDuration: "300s"
    taskCount: 1
    parallelism: 1

allocationPolicy:
  instances:
    - policy:
        machineType: "e2-standard-2"
  location:
    allowedLocations:
      - "regions/us-central1"

logsPolicy:
  destination: "CLOUD_LOGGING"

labels:
  app: "miraikakaku"
  type: "schema-check"