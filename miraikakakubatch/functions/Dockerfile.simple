FROM python:3.9-slim

WORKDIR /app

# Minimal dependencies only
RUN apt-get update && apt-get install -y \
    gcc \
    python3-dev \
    pkg-config \
    && rm -rf /var/lib/apt/lists/*

# Install only essential Python packages
RUN pip3 install --no-cache-dir \
    pymysql==1.0.2 \
    numpy==1.24.3

# Create simple batch worker inline
RUN echo '#!/usr/bin/env python3\n\
import pymysql\n\
import random\n\
import numpy as np\n\
from datetime import datetime, timedelta\n\
import os\n\
import logging\n\
\n\
logging.basicConfig(level=logging.INFO)\n\
logger = logging.getLogger(__name__)\n\
\n\
def main():\n\
    worker_id = int(os.getenv("BATCH_TASK_INDEX", "0"))\n\
    logger.info(f"Simple Worker {worker_id} started")\n\
    \n\
    db_config = {\n\
        "host": "34.58.103.36",\n\
        "user": "miraikakaku-user",\n\
        "password": "miraikakaku-secure-pass-2024",\n\
        "database": "miraikakaku",\n\
        "charset": "utf8mb4"\n\
    }\n\
    \n\
    try:\n\
        connection = pymysql.connect(**db_config)\n\
        logger.info("Database connected")\n\
        \n\
        with connection.cursor() as cursor:\n\
            batch_size = 10\n\
            offset = worker_id * batch_size\n\
            \n\
            cursor.execute("""\n\
                SELECT symbol FROM stock_master\n\
                WHERE is_active = 1\n\
                ORDER BY symbol\n\
                LIMIT %s OFFSET %s\n\
            """, (batch_size, offset))\n\
            \n\
            stocks = cursor.fetchall()\n\
            logger.info(f"Processing {len(stocks)} stocks")\n\
            \n\
            total = 0\n\
            for stock in stocks:\n\
                symbol = stock[0]\n\
                predictions = []\n\
                \n\
                for j in range(3):\n\
                    pred_date = datetime.now() - timedelta(days=j)\n\
                    pred_price = random.uniform(100, 1000)\n\
                    confidence = random.uniform(0.7, 0.9)\n\
                    \n\
                    predictions.append((\n\
                        symbol, pred_date.strftime("%Y-%m-%d %H:%M:%S"),\n\
                        round(pred_price, 2), 0, 0,\n\
                        round(confidence, 3), "simple_model",\n\
                        "v1", 1, 1, f"SimpleWorker_{worker_id}"\n\
                    ))\n\
                \n\
                if predictions:\n\
                    cursor.executemany("""\n\
                        INSERT INTO stock_predictions\n\
                        (symbol, prediction_date, predicted_price, predicted_change,\n\
                         predicted_change_percent, confidence_score, model_type,\n\
                         model_version, prediction_horizon, is_active, notes, created_at)\n\
                        VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, NOW())\n\
                    """, predictions)\n\
                    connection.commit()\n\
                    total += len(predictions)\n\
            \n\
            logger.info(f"Generated {total} predictions")\n\
    \n\
    except Exception as e:\n\
        logger.error(f"Error: {e}")\n\
        exit(1)\n\
    finally:\n\
        if "connection" in locals():\n\
            connection.close()\n\
\n\
if __name__ == "__main__":\n\
    main()\n\
' > simple_worker.py

ENV PYTHONUNBUFFERED=1

CMD ["python3", "simple_worker.py"]