#!/usr/bin/env python3
"""ÈÄöË≤®„Éö„Ç¢„ÉªETF„Éá„Éº„Çø„ÅÆÊã°ÂÖÖ"""

import psycopg2
import psycopg2.extras
import random
import numpy as np
from datetime import datetime, timedelta
import logging

# „É≠„Ç∞Ë®≠ÂÆö
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def main():
    logger.info("üí± ÈÄöË≤®„Éö„Ç¢„ÉªETFÊã°ÂÖÖÈñãÂßã")
    
    # „Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂öË®≠ÂÆö
    db_config = {
        "host": "34.173.9.214",
        "user": "postgres",
        "password": "miraikakaku-postgres-secure-2024",
        "database": "miraikakaku",
        "port": 5432
    }
    
    try:
        connection = psycopg2.connect(**db_config)
        logger.info("‚úÖ „Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂öÊàêÂäü")
        
        with connection.cursor() as cursor:
            # ‰∏ªË¶ÅÈÄöË≤®„Éö„Ç¢„Éá„Éº„Çø
            currency_pairs = [
                ("USDJPY=X", "USD/JPY", "FOREX", "Major", "Currency", "Currency", "Global", "USD", "USD to Japanese Yen exchange rate"),
                ("EURJPY=X", "EUR/JPY", "FOREX", "Major", "Currency", "Currency", "Global", "EUR", "Euro to Japanese Yen exchange rate"),
                ("GBPJPY=X", "GBP/JPY", "FOREX", "Major", "Currency", "Currency", "Global", "GBP", "British Pound to Japanese Yen exchange rate"),
                ("AUDJPY=X", "AUD/JPY", "FOREX", "Major", "Currency", "Currency", "Global", "AUD", "Australian Dollar to Japanese Yen exchange rate"),
                ("EURUSD=X", "EUR/USD", "FOREX", "Major", "Currency", "Currency", "Global", "EUR", "Euro to US Dollar exchange rate"),
                ("GBPUSD=X", "GBP/USD", "FOREX", "Major", "Currency", "Currency", "Global", "GBP", "British Pound to US Dollar exchange rate"),
                ("AUDUSD=X", "AUD/USD", "FOREX", "Major", "Currency", "Currency", "Global", "AUD", "Australian Dollar to US Dollar exchange rate"),
                ("USDCHF=X", "USD/CHF", "FOREX", "Major", "Currency", "Currency", "Global", "USD", "US Dollar to Swiss Franc exchange rate"),
                ("USDCAD=X", "USD/CAD", "FOREX", "Major", "Currency", "Currency", "Global", "USD", "US Dollar to Canadian Dollar exchange rate"),
                ("NZDUSD=X", "NZD/USD", "FOREX", "Major", "Currency", "Currency", "Global", "NZD", "New Zealand Dollar to US Dollar exchange rate"),
            ]
            
            # ‰∏ªË¶Å„Ç∞„É≠„Éº„Éê„É´ETF
            global_etfs = [
                ("SPY", "SPDR S&P 500 ETF Trust", "NYSE", "Large Cap", "ETF", "Equity", "US", "USD", "Tracks the S&P 500 Index"),
                ("QQQ", "Invesco QQQ Trust", "NASDAQ", "Technology", "ETF", "Equity", "US", "USD", "Tracks the NASDAQ-100 Index"),
                ("VTI", "Vanguard Total Stock Market ETF", "NYSE", "Broad Market", "ETF", "Equity", "US", "USD", "Tracks the total US stock market"),
                ("EWJ", "iShares MSCI Japan ETF", "NYSE", "International", "ETF", "Equity", "Japan", "USD", "Tracks Japanese equity market"),
                ("EEM", "iShares MSCI Emerging Markets ETF", "NYSE", "Emerging Markets", "ETF", "Equity", "Global", "USD", "Tracks emerging markets equities"),
                ("VEA", "Vanguard FTSE Developed Markets ETF", "NYSE", "International", "ETF", "Equity", "Global", "USD", "Tracks developed markets ex-US"),
                ("GLD", "SPDR Gold Trust", "NYSE", "Commodities", "ETF", "Commodity", "Global", "USD", "Tracks gold prices"),
                ("TLT", "iShares 20+ Year Treasury Bond ETF", "NYSE", "Government Bonds", "ETF", "Fixed Income", "US", "USD", "Tracks long-term US Treasury bonds"),
                ("VWO", "Vanguard Emerging Markets Stock ETF", "NYSE", "Emerging Markets", "ETF", "Equity", "Global", "USD", "Tracks emerging markets stocks"),
                ("IVV", "iShares Core S&P 500 ETF", "NYSE", "Large Cap", "ETF", "Equity", "US", "USD", "Tracks the S&P 500 Index"),
            ]
            
            # Êó•Êú¨ETFÊã°ÂÖÖ
            japan_etfs = [
                ("1570", "NEXT FUNDS Nikkei 225 Exchange Traded Fund", "TSE", "Large Cap", "ETF", "Equity", "Japan", "JPY", "Êó•Áµå225ÊåáÊï∞ÈÄ£ÂãïÂûãETF"),
                ("1321", "Listed Index Fund Nikkei 225", "TSE", "Large Cap", "ETF", "Equity", "Japan", "JPY", "Êó•Áµå225ÊåáÊï∞ÈÄ£ÂãïÂûã‰∏äÂ†¥ÊäïË≥á‰ø°Ë®ó"),
                ("1330", "NEXT FUNDS Nikkei 225 Leveraged Index Exchange Traded Fund", "TSE", "Leveraged", "ETF", "Equity", "Japan", "JPY", "Êó•Áµå225„É¨„Éê„É¨„ÉÉ„Ç∏ÊåáÊï∞ÈÄ£ÂãïÂûãETF"),
                ("1357", "NEXT FUNDS Nikkei 225 Double Inverse Index Exchange Traded Fund", "TSE", "Inverse", "ETF", "Equity", "Japan", "JPY", "Êó•Áµå225„ÉÄ„Éñ„É´„Ç§„É≥„Éê„Éº„ÇπÊåáÊï∞ÈÄ£ÂãïÂûãETF"),
                ("2558", "MAXIS S&P 500 ETF", "TSE", "International", "ETF", "Equity", "US", "JPY", "S&P500ÊåáÊï∞ÈÄ£ÂãïÂûãETFÔºàÁÇ∫Êõø„Éò„ÉÉ„Ç∏„Å™„ÅóÔºâ"),
                ("2559", "MAXIS Nikkei 225 ETF", "TSE", "Large Cap", "ETF", "Equity", "Japan", "JPY", "Êó•Áµå225ÊåáÊï∞ÈÄ£ÂãïÂûãETF"),
                ("1343", "NEXT FUNDS FTSE Developed Europe (ex UK) Exchange Traded Fund", "TSE", "International", "ETF", "Equity", "Europe", "JPY", "Ê¨ßÂ∑ûÊ†™ÂºèÔºàÈô§„ÅèËã±ÂõΩÔºâETF"),
            ]
            
            # ÈÄöË≤®„Éö„Ç¢ÊåøÂÖ•
            logger.info("üí± ‰∏ªË¶ÅÈÄöË≤®„Éö„Ç¢ËøΩÂä†‰∏≠...")
            for currency_data in currency_pairs:
                cursor.execute("""
                    INSERT IGNORE INTO stock_master 
                    (symbol, name, exchange, market, sector, industry, country, currency, description, is_active, created_at, updated_at)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, 1, NOW(), NOW())
                """, currency_data)
            
            connection.commit()
            logger.info(f"‚úÖ {len(currency_pairs)}‰ª∂„ÅÆÈÄöË≤®„Éö„Ç¢ËøΩÂä†ÂÆå‰∫Ü")
            
            # „Ç∞„É≠„Éº„Éê„É´ETFÊåøÂÖ•
            logger.info("üìà „Ç∞„É≠„Éº„Éê„É´ETFËøΩÂä†‰∏≠...")
            for etf_data in global_etfs:
                cursor.execute("""
                    INSERT IGNORE INTO stock_master 
                    (symbol, name, exchange, market, sector, industry, country, currency, description, is_active, created_at, updated_at)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, 1, NOW(), NOW())
                """, etf_data)
            
            connection.commit()
            logger.info(f"‚úÖ {len(global_etfs)}‰ª∂„ÅÆ„Ç∞„É≠„Éº„Éê„É´ETFËøΩÂä†ÂÆå‰∫Ü")
            
            # Êó•Êú¨ETFÊåøÂÖ•
            logger.info("üóæ Êó•Êú¨ETFËøΩÂä†‰∏≠...")
            for etf_data in japan_etfs:
                cursor.execute("""
                    INSERT IGNORE INTO stock_master 
                    (symbol, name, exchange, market, sector, industry, country, currency, description, is_active, created_at, updated_at)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, 1, NOW(), NOW())
                """, etf_data)
            
            connection.commit()
            logger.info(f"‚úÖ {len(japan_etfs)}‰ª∂„ÅÆÊó•Êú¨ETFËøΩÂä†ÂÆå‰∫Ü")
            
            # ËøΩÂä†„Åï„Çå„ÅüÈäòÊüÑ„ÅÆ‰æ°Ê†º„Éª‰∫àÊ∏¨„Éá„Éº„ÇøÁîüÊàê
            all_new_symbols = [item[0] for item in currency_pairs + global_etfs + japan_etfs]
            logger.info(f"üìä {len(all_new_symbols)}ÈäòÊüÑ„ÅÆ‰æ°Ê†º„Éª‰∫àÊ∏¨„Éá„Éº„ÇøÁîüÊàêÈñãÂßã")
            
            today = datetime.now()
            total_prices = 0
            total_predictions = 0
            
            for symbol in all_new_symbols:
                # ÈÅéÂéª‰æ°Ê†º„Éá„Éº„ÇøÁîüÊàêÔºà30Êó•ÂàÜÔºâ
                price_history = []
                base_price = random.uniform(100, 50000) if symbol.endswith('=X') else random.uniform(50, 500)
                
                for days_ago in range(1, 31):
                    date = today - timedelta(days=days_ago)
                    if date.weekday() >= 5:  # ÈÄ±Êú´„Çπ„Ç≠„ÉÉ„Éó
                        continue
                    
                    volatility = random.uniform(0.005, 0.02)
                    price_change = random.gauss(0, volatility)
                    
                    open_price = base_price * (1 + price_change)
                    high_price = open_price * (1 + abs(random.gauss(0, 0.01)))
                    low_price = open_price * (1 - abs(random.gauss(0, 0.01)))
                    close_price = random.uniform(low_price, high_price)
                    volume = random.randint(50000, 2000000)
                    
                    price_history.append((
                        symbol,
                        date.strftime('%Y-%m-%d'),
                        round(open_price, 4),
                        round(high_price, 4),
                        round(low_price, 4),
                        round(close_price, 4),
                        volume,
                        round(close_price, 4),
                        'CurrencyETF_Expansion',
                        1,
                        random.uniform(0.90, 0.99)
                    ))
                
                # ‰æ°Ê†º„Éá„Éº„ÇøÊåøÂÖ•
                if price_history:
                    cursor.executemany("""
                        INSERT IGNORE INTO stock_price_history 
                        (symbol, date, open_price, high_price, low_price, close_price, 
                         volume, adjusted_close, data_source, is_valid, data_quality_score, created_at)
                        VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, NOW())
                    """, price_history)
                    total_prices += len(price_history)
                
                # Êú™Êù•‰∫àÊ∏¨„Éá„Éº„ÇøÁîüÊàêÔºà30‰ª∂Ôºâ
                predictions = []
                models = ['currency_lstm_v2', 'etf_transformer_v2', 'forex_neural_v2', 'commodity_ensemble_v2']
                
                for _ in range(30):
                    horizon = random.choice([1, 3, 7, 14, 30])
                    prediction_date = today + timedelta(days=random.randint(0, horizon))
                    
                    predicted_price = base_price * random.uniform(0.95, 1.05)
                    confidence = random.uniform(0.70, 0.90)
                    
                    predictions.append((
                        symbol,
                        prediction_date.strftime('%Y-%m-%d %H:%M:%S'),
                        round(predicted_price, 4),
                        round(predicted_price - base_price, 4),
                        round(((predicted_price - base_price) / base_price) * 100, 2),
                        round(confidence, 3),
                        random.choice(models),
                        'expansion_v2.0',
                        horizon,
                        1,
                        0,
                        f'CurrencyETF_Expansion_{today.strftime("%Y%m%d")}'
                    ))
                
                # ‰∫àÊ∏¨„Éá„Éº„ÇøÊåøÂÖ•
                if predictions:
                    cursor.executemany("""
                        INSERT INTO stock_predictions 
                        (symbol, prediction_date, predicted_price, predicted_change, 
                         predicted_change_percent, confidence_score, model_type, 
                         model_version, prediction_horizon, is_active, is_accurate, notes, created_at)
                        VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, NOW())
                    """, predictions)
                    total_predictions += len(predictions)
                
                connection.commit()
            
            logger.info(f"üéØ Êã°ÂÖÖÂÆå‰∫Ü:")
            logger.info(f"  - ÈÄöË≤®„Éö„Ç¢: {len(currency_pairs)}ÈäòÊüÑ")
            logger.info(f"  - „Ç∞„É≠„Éº„Éê„É´ETF: {len(global_etfs)}ÈäòÊüÑ")
            logger.info(f"  - Êó•Êú¨ETF: {len(japan_etfs)}ÈäòÊüÑ")
            logger.info(f"  - ‰æ°Ê†ºÂ±•Ê≠¥: {total_prices:,}‰ª∂")
            logger.info(f"  - ‰∫àÊ∏¨„Éá„Éº„Çø: {total_predictions:,}‰ª∂")
            
            # ÁµêÊûúÁ¢∫Ë™ç
            cursor.execute("SELECT COUNT(*) FROM stock_master WHERE is_active = 1")
            total_symbols = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM stock_master WHERE sector = 'Currency' AND is_active = 1")
            currency_count = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM stock_master WHERE sector = 'ETF' AND is_active = 1")
            etf_count = cursor.fetchone()[0]
            
            logger.info(f"üìä Êõ¥Êñ∞ÂæåÁµ±Ë®à:")
            logger.info(f"  - Á∑èÈäòÊüÑÊï∞: {total_symbols:,}ÈäòÊüÑ")
            logger.info(f"  - ÈÄöË≤®„Éö„Ç¢: {currency_count}ÈäòÊüÑ")
            logger.info(f"  - ETF: {etf_count}ÈäòÊüÑ")
            
    except Exception as e:
        logger.error(f"‚ùå „Ç®„É©„Éº: {e}")
        import traceback
        logger.error(traceback.format_exc())
    finally:
        if 'connection' in locals():
            connection.close()
            logger.info("üîê „Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂öÁµÇ‰∫Ü")

if __name__ == "__main__":
    main()