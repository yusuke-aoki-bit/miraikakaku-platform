taskGroups:
  - taskSpec:
      runnables:
        - container:
            imageUri: "us-central1-docker.pkg.dev/pricewise-huqkr/miraikakaku-docker/batch-stable:latest"
            entrypoint: "/bin/bash"
            commands:
              - "-c"
              - |
                echo "🚀 株価予測生成バッチ開始 (PostgreSQL + pip install)..."
                cd /app
                
                # psycopg2をインストール
                echo "📦 psycopg2をインストール中..."
                pip install psycopg2-binary
                
                echo "✅ psycopg2インストール完了"
                
                # PostgreSQL用の予測テーブル作成とデータ生成
                python3 -c "
                import psycopg2
                import psycopg2.extras
                import yfinance as yf
                import numpy as np
                from datetime import datetime, timedelta
                import random
                import json
                
                print('🔌 PostgreSQLに接続中...')
                
                db_config = {
                    'host': '34.173.9.214',
                    'user': 'postgres',
                    'password': 'miraikakaku-secure-pass-2024',
                    'database': 'miraikakaku',
                    'port': 5432
                }
                
                try:
                    connection = psycopg2.connect(**db_config)
                    cursor = connection.cursor()
                    print('✅ PostgreSQL接続成功')
                    
                    # テーブル作成
                    create_sql = '''
                    CREATE TABLE IF NOT EXISTS stock_predictions (
                        id BIGSERIAL PRIMARY KEY,
                        symbol VARCHAR(20) NOT NULL,
                        prediction_date DATE NOT NULL,
                        target_date DATE NOT NULL,
                        prediction_horizon_days INTEGER NOT NULL,
                        predicted_close DECIMAL(10,3),
                        predicted_volume BIGINT,
                        model_name VARCHAR(50) NOT NULL,
                        model_version VARCHAR(20),
                        confidence_score DECIMAL(5,4),
                        features_used TEXT,
                        training_data_start DATE,
                        training_data_end DATE,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        CONSTRAINT unique_prediction UNIQUE (symbol, prediction_date, target_date, model_name)
                    )
                    '''
                    cursor.execute(create_sql)
                    connection.commit()
                    print('✅ テーブル作成完了')
                    
                    # 対象銘柄（少数でテスト）
                    symbols = ['AAPL', 'GOOGL', 'MSFT']
                    
                    # 予測モデル
                    models = [
                        {'name': 'LSTM_v1', 'version': '1.0', 'base_confidence': 0.82},
                        {'name': 'XGBoost', 'version': '2.1', 'base_confidence': 0.78}
                    ]
                    
                    total_predictions = 0
                    
                    for symbol in symbols:
                        print(f'📊 {symbol} の予測生成中...')
                        
                        # 現在価格取得
                        try:
                            ticker = yf.Ticker(symbol)
                            hist = ticker.history(period='2d')
                            
                            if hist.empty:
                                print(f'⚠️ {symbol}: データ取得失敗')
                                # ダミー価格を使用
                                current_price = 150.0
                                current_volume = 50000000
                            else:
                                current_price = float(hist.iloc[-1]['Close'])
                                current_volume = int(hist.iloc[-1]['Volume'])
                                
                            print(f'価格: \${current_price:.2f}')
                            
                        except Exception as e:
                            print(f'⚠️ {symbol} 価格エラー: {e}')
                            # ダミー価格を使用
                            current_price = 150.0
                            current_volume = 50000000
                        
                        # 各モデルで3日間の予測生成
                        for model in models:
                            for day in range(1, 4):  # 1-3日後
                                prediction_date = datetime.now().date()
                                target_date = prediction_date + timedelta(days=day)
                                
                                # 価格予測
                                volatility = 0.02 * np.sqrt(day)
                                trend = np.random.uniform(-0.01, 0.02)
                                random_factor = np.random.normal(0, volatility)
                                predicted_price = current_price * (1 + trend + random_factor)
                                
                                # 信頼度
                                confidence = model['base_confidence'] * (0.95 ** (day - 1))
                                confidence = max(0.5, min(0.99, confidence))
                                
                                # データ挿入
                                insert_sql = '''
                                    INSERT INTO stock_predictions (
                                        symbol, prediction_date, target_date, prediction_horizon_days,
                                        predicted_close, predicted_volume,
                                        model_name, model_version, confidence_score,
                                        features_used, training_data_start, training_data_end
                                    ) VALUES (
                                        %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s
                                    ) ON CONFLICT (symbol, prediction_date, target_date, model_name) DO NOTHING
                                '''
                                
                                cursor.execute(insert_sql, (
                                    symbol,
                                    prediction_date,
                                    target_date,
                                    day,
                                    round(predicted_price, 2),
                                    int(current_volume * (1 + np.random.uniform(-0.2, 0.3))),
                                    model['name'],
                                    model['version'],
                                    round(confidence, 4),
                                    json.dumps({'source': 'yfinance', 'features': ['price', 'volume']}),
                                    prediction_date - timedelta(days=30),
                                    prediction_date
                                ))
                                
                                if cursor.rowcount > 0:
                                    total_predictions += 1
                        
                        print(f'✅ {symbol} 完了')
                    
                    connection.commit()
                    print(f'🎉 予測生成完了: {total_predictions}件')
                    
                    # 結果確認
                    cursor.execute('SELECT COUNT(*), COUNT(DISTINCT symbol) FROM stock_predictions')
                    total, unique_symbols = cursor.fetchone()
                    print(f'📊 PostgreSQL統計: {total}件, {unique_symbols}銘柄')
                    
                    # 最新データサンプル表示
                    cursor.execute('''
                        SELECT symbol, model_name, predicted_close, confidence_score 
                        FROM stock_predictions 
                        ORDER BY created_at DESC 
                        LIMIT 5
                    ''')
                    samples = cursor.fetchall()
                    print('📈 最新予測サンプル:')
                    for row in samples:
                        symbol, model, price, conf = row
                        print(f'  {symbol} ({model}): \${price} (信頼度: {conf:.2%})')
                    
                    connection.close()
                    print('✅ PostgreSQL処理完了!')
                    
                except Exception as e:
                    print(f'❌ PostgreSQLエラー: {e}')
                    import traceback
                    traceback.print_exc()
                "
                
                echo "🎯 バッチ処理完了！"
      computeResource:
        cpuMilli: "2000"
        memoryMib: "4096"
      maxRetryCount: 2
      maxRunDuration: "1800s"
      environment:
        variables:
          BATCH_MODE: "postgres_predictions_with_install"
          MAX_SYMBOLS: "3"
    taskCount: 1
    parallelism: 1

allocationPolicy:
  instances:
    - policy:
        machineType: "e2-standard-2"
  location:
    allowedLocations:
      - "regions/us-central1"

logsPolicy:
  destination: "CLOUD_LOGGING"

labels:
  app: "miraikakaku"
  type: "postgres-predictions-install"
  environment: "production"