  taskGroups:
  - name: training-data-workers
    taskSpec:
      runnables:
      - script:
          text: |
            #!/bin/bash
            set -e
            echo '🔥 システム準備開始'
            
            # システム更新とPython依存関係インストール
            apt-get update -qq
            apt-get install -y -qq python3-pip python3-dev default-libmysqlclient-dev build-essential
            
            # Pythonモジュールインストール
            pip3 install --no-cache-dir --upgrade pip
            pip3 install --no-cache-dir pymysql numpy mysql-connector-python
            
            # インストール確認
            python3 -c "import pymysql; import numpy; print('✅ 依存関係インストール成功')"
            
            echo '✅ システム準備完了'
      - script:
          text: |
            #!/bin/bash
            set -e
            echo '🔥 バッチ処理開始'
            
            # データベース設定の環境変数設定
            export DB_HOST="34.58.103.36"
            export DB_USER="miraikakaku-user"
            export DB_PASSWORD="miraikakaku-secure-pass-2024"
            export DB_NAME="miraikakaku"
            
            # Pythonスクリプト実行
            python3 << 'EOF'
            import pymysql
            import random
            import numpy as np
            from datetime import datetime, timedelta
            import os

            worker_id = int(os.getenv('BATCH_NODE_INDEX', '0'))
            print(f"🚀 Worker {worker_id} 開始")

            db_config = {
                "host": os.getenv('DB_HOST', '34.58.103.36'),
                "user": os.getenv('DB_USER', 'miraikakaku-user'),
                "password": os.getenv('DB_PASSWORD', 'miraikakaku-secure-pass-2024'),
                "database": os.getenv('DB_NAME', 'miraikakaku'),
                "charset": "utf8mb4"
            }

            try:
                connection = pymysql.connect(**db_config)
                print("✅ データベース接続成功")
                
                with connection.cursor() as cursor:
                    batch_size = 100
                    offset = worker_id * batch_size
                    
                    cursor.execute("""
                        SELECT symbol, name FROM stock_master 
                        WHERE is_active = 1 
                        ORDER BY symbol
                        LIMIT %s OFFSET %s
                    """, (batch_size, offset))
                    
                    stocks = cursor.fetchall()
                    print(f"💫 Worker {worker_id}: {len(stocks)}銘柄処理開始")
                    
                    models = ['lstm_v3', 'transformer_v3', 'ensemble_v3', 'neural_v3']
                    total_generated = 0
                    
                    for i, stock in enumerate(stocks):
                        symbol = stock[0]
                        
                        predictions = []
                        for j in range(20):  # 各銘柄20件
                            horizon = random.choice([1, 3, 7, 14, 30])
                            prediction_date = datetime.now() - timedelta(days=random.randint(0, 30))
                            
                            base_price = random.uniform(100, 5000)
                            volatility = random.uniform(0.01, 0.05)
                            price_change = random.gauss(0, volatility)
                            predicted_price = max(10, base_price * (1 + price_change))
                            
                            confidence = random.uniform(0.65, 0.90)
                            model_type = random.choice(models)
                            
                            predictions.append((
                                symbol, prediction_date, round(predicted_price, 2),
                                round(predicted_price - base_price, 2),
                                round(((predicted_price - base_price) / base_price) * 100, 2),
                                round(confidence, 3), model_type, 'v3.0', horizon, 1,
                                f'Batch_Worker_{worker_id}'
                            ))
                        
                        if predictions:
                            cursor.executemany("""
                                INSERT INTO stock_predictions 
                                (symbol, prediction_date, predicted_price, predicted_change, 
                                 predicted_change_percent, confidence_score, model_type, 
                                 model_version, prediction_horizon, is_active, notes, created_at)
                                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, NOW())
                            """, predictions)
                            
                            connection.commit()
                            total_generated += len(predictions)
                            
                            if (i + 1) % 10 == 0:
                                progress = ((i + 1) / len(stocks)) * 100
                                print(f"📈 Worker {worker_id}: {progress:.0f}% 完了 ({total_generated:,}件生成)")
                    
                    print(f"🎯 Worker {worker_id} 完了: {len(stocks)}銘柄 × 20件 = {total_generated:,}件生成")
                    
            except Exception as e:
                print(f"❌ Worker {worker_id} エラー: {e}")
                raise
            finally:
                if 'connection' in locals():
                    connection.close()
                    print(f"🔐 データベース接続終了")
            EOF
            
            echo '✅ バッチ処理完了'
        environment:
          variables:
            DB_HOST: "34.58.103.36"
            DB_USER: "miraikakaku-user" 
            DB_PASSWORD: "miraikakaku-secure-pass-2024"
            DB_NAME: "miraikakaku"
            BATCH_SIZE: "100"
            PREDICTIONS_PER_STOCK: "50"
      computeResource:
        cpuMilli: 2000
        memoryMib: 4096
      maxRetryCount: 2
      maxRunDuration: 3600s
    taskCount: 5
    parallelism: 5
  allocationPolicy:
    instances:
    - policy:
        machineType: e2-standard-2
        provisioningModel: STANDARD
    location:
      allowedLocations:
      - regions/us-central1
  logsPolicy:
    destination: CLOUD_LOGGING