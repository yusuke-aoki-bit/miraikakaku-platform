taskGroups:
- name: real-data-expansion-workers
  taskSpec:
    runnables:
    - container:
        imageUri: gcr.io/pricewise-huqkr/batch-prediction-generator:latest
        entrypoint: python3
        commands:
        - -c
        - |
          import pymysql
          import requests
          import time
          import os
          import logging
          from datetime import datetime, timedelta
          import json

          # ログ設定
          logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
          logger = logging.getLogger(__name__)

          worker_id = int(os.getenv('BATCH_TASK_INDEX', '0'))
          total_workers = int(os.getenv('BATCH_TASK_COUNT', '6'))
          logger.info(f"🔍 Real Data Expansion Worker {worker_id}/{total_workers} 開始")

          # データベース設定
          db_config = {
              "host": os.getenv('DB_HOST', '34.58.103.36'),
              "user": os.getenv('DB_USER', 'miraikakaku-user'),
              "password": os.getenv('DB_PASSWORD', 'miraikakaku-secure-pass-2024'),
              "database": os.getenv('DB_NAME', 'miraikakaku'),
              "charset": "utf8mb4"
          }

          def get_missing_symbols_for_worker(worker_id, total_workers, limit_per_worker=100):
              """ワーカー別の実データ不足銘柄取得"""
              connection = pymysql.connect(**db_config)
              try:
                  with connection.cursor() as cursor:
                      offset = worker_id * limit_per_worker
                      cursor.execute("""
                          SELECT sm.symbol, sm.name, sm.exchange, sm.country, sm.sector
                          FROM stock_master sm
                          LEFT JOIN stock_price_history sph ON sm.symbol = sph.symbol
                          WHERE sm.is_active = 1
                          AND sph.symbol IS NULL
                          ORDER BY 
                              CASE 
                                  WHEN sm.country IN ('US', 'United States') THEN 1
                                  WHEN sm.country = 'Japan' THEN 2
                                  WHEN sm.exchange IN ('NYSE', 'NASDAQ', 'TSE') THEN 3
                                  ELSE 4
                              END,
                              sm.symbol
                          LIMIT %s OFFSET %s
                      """, (limit_per_worker, offset))
                      return cursor.fetchall()
              finally:
                  connection.close()

          def fetch_yahoo_finance_simple(symbol):
              """簡単なYahoo Finance相当のデータ取得（CSV形式）"""
              try:
                  # シンボル変換
                  if symbol.isdigit() and len(symbol) >= 4:
                      yf_symbol = f"{symbol}.T"  # 日本株
                  elif symbol.endswith('=X'):
                      yf_symbol = symbol  # 通貨ペア
                  else:
                      yf_symbol = symbol  # US株等
                  
                  # Yahoo Finance CSVエンドポイント（簡易版）
                  end_date = datetime.now()
                  start_date = end_date - timedelta(days=365)  # 1年分
                  
                  url = f"https://query1.finance.yahoo.com/v7/finance/download/{yf_symbol}"
                  params = {
                      'period1': int(start_date.timestamp()),
                      'period2': int(end_date.timestamp()),
                      'interval': '1d',
                      'events': 'history',
                      'includeAdjustedClose': 'true'
                  }
                  
                  headers = {
                      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                  }
                  
                  response = requests.get(url, params=params, headers=headers, timeout=15)
                  
                  if response.status_code != 200:
                      logger.warning(f"Yahoo: {symbol} HTTP {response.status_code}")
                      return None
                  
                  # CSV解析
                  lines = response.text.strip().split('\\n')
                  if len(lines) < 2:
                      logger.warning(f"Yahoo: {symbol} データなし")
                      return None
                  
                  headers = lines[0].split(',')
                  price_data = []
                  
                  for line in lines[1:]:
                      try:
                          values = line.split(',')
                          if len(values) < 7:
                              continue
                          
                          date_str = values[0]
                          open_price = float(values[1])
                          high_price = float(values[2])
                          low_price = float(values[3])
                          close_price = float(values[4])
                          adj_close = float(values[5])
                          volume = int(values[6])
                          
                          # 有効性チェック
                          if open_price <= 0 or close_price <= 0 or volume < 0:
                              continue
                          
                          price_data.append({
                              'symbol': symbol,
                              'date': datetime.strptime(date_str, '%Y-%m-%d').date(),
                              'open_price': open_price,
                              'high_price': high_price,
                              'low_price': low_price,
                              'close_price': close_price,
                              'adjusted_close': adj_close,
                              'volume': volume,
                              'data_source': f'YahooFinanceCSV_{datetime.now().strftime("%Y%m%d")}_{worker_id}',
                              'is_valid': 1,
                              'data_quality_score': 0.92
                          })
                          
                      except (ValueError, IndexError) as e:
                          logger.warning(f"Yahoo: {symbol} 行解析エラー: {e}")
                          continue
                  
                  logger.info(f"Yahoo CSV: {symbol} - {len(price_data)}件取得")
                  return price_data
                  
              except Exception as e:
                  logger.error(f"Yahoo CSV: {symbol} 取得エラー - {e}")
                  return None

          def save_real_data_batch(price_data_list):
              """実データのバッチ保存"""
              if not price_data_list:
                  return 0
                  
              connection = pymysql.connect(**db_config)
              try:
                  with connection.cursor() as cursor:
                      insert_data = []
                      for data in price_data_list:
                          insert_data.append((
                              data['symbol'], data['date'],
                              data['open_price'], data['high_price'], 
                              data['low_price'], data['close_price'],
                              data['volume'], data['adjusted_close'],
                              data['data_source'], data['is_valid'],
                              data['data_quality_score']
                          ))
                      
                      cursor.executemany("""
                          INSERT IGNORE INTO stock_price_history 
                          (symbol, date, open_price, high_price, low_price, close_price, 
                           volume, adjusted_close, data_source, is_valid, data_quality_score, created_at)
                          VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, NOW())
                      """, insert_data)
                      
                      connection.commit()
                      return cursor.rowcount
                      
              except Exception as e:
                  logger.error(f"バッチ保存エラー: {e}")
                  return 0
              finally:
                  connection.close()

          try:
              # ワーカー別不足銘柄取得
              missing_symbols = get_missing_symbols_for_worker(worker_id, total_workers, 100)
              logger.info(f"💫 Real Worker {worker_id}: {len(missing_symbols)}銘柄の実データ収集開始")
              
              if not missing_symbols:
                  logger.info(f"⚠️ Real Worker {worker_id}: 処理対象銘柄なし")
                  exit(0)
              
              total_collected_records = 0
              successful_symbols = 0
              failed_symbols = 0
              
              for i, (symbol, name, exchange, country, sector) in enumerate(missing_symbols):
                  logger.info(f"🔍 Real Worker {worker_id}: {i+1}/{len(missing_symbols)} - {symbol} ({country or 'N/A'})")
                  
                  # Yahoo Finance CSVで実データ取得試行
                  price_data = fetch_yahoo_finance_simple(symbol)
                  
                  if price_data and len(price_data) > 0:
                      # データ保存
                      saved_count = save_real_data_batch(price_data)
                      if saved_count > 0:
                          total_collected_records += saved_count
                          successful_symbols += 1
                          logger.info(f"✅ Real Worker {worker_id}: {symbol} - {saved_count}件保存")
                      else:
                          failed_symbols += 1
                          logger.warning(f"⚠️ Real Worker {worker_id}: {symbol} - 保存失敗")
                  else:
                      failed_symbols += 1
                      logger.warning(f"❌ Real Worker {worker_id}: {symbol} - 取得失敗")
                  
                  # Yahoo APIレート制限対応
                  time.sleep(1.0)
                  
                  # 進捗報告
                  if (i + 1) % 20 == 0:
                      progress = ((i + 1) / len(missing_symbols)) * 100
                      success_rate = (successful_symbols / (i + 1)) * 100
                      logger.info(f"📈 Real Worker {worker_id}: {progress:.0f}% 完了")
                      logger.info(f"   成功: {successful_symbols}, 失敗: {failed_symbols}, 成功率: {success_rate:.1f}%")
                      logger.info(f"   累計データ: {total_collected_records:,}件")
              
              # 最終結果
              final_success_rate = (successful_symbols / len(missing_symbols)) * 100
              logger.info(f"🎯 Real Worker {worker_id} 完了:")
              logger.info(f"   - 処理銘柄: {len(missing_symbols)}銘柄")
              logger.info(f"   - 成功銘柄: {successful_symbols}銘柄 ({final_success_rate:.1f}%)")
              logger.info(f"   - 失敗銘柄: {failed_symbols}銘柄")
              logger.info(f"   - 収集データ: {total_collected_records:,}件")
              
              if successful_symbols == 0:
                  logger.error(f"❌ Real Worker {worker_id}: 全銘柄で実データ取得失敗")
                  exit(1)
              
          except Exception as e:
              logger.error(f"❌ Real Worker {worker_id} 重大エラー: {e}")
              import traceback
              logger.error(traceback.format_exc())
              exit(1)
      environment:
        variables:
          DB_HOST: "34.58.103.36"
          DB_USER: "miraikakaku-user"
          DB_PASSWORD: "miraikakaku-secure-pass-2024"
          DB_NAME: "miraikakaku"
          PYTHONUNBUFFERED: "1"
    computeResource:
      cpuMilli: 1500
      memoryMib: 3072
    maxRetryCount: 2
    maxRunDuration: 3600s  # 60分
  taskCount: 6
  parallelism: 3
allocationPolicy:
  instances:
  - policy:
      machineType: e2-standard-2
      provisioningModel: STANDARD
  location:
    allowedLocations:
    - regions/us-central1
logsPolicy:
  destination: CLOUD_LOGGING