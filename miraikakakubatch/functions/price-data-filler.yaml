taskGroups:
  - taskSpec:
      runnables:
        - container:
            imageUri: "us-central1-docker.pkg.dev/pricewise-huqkr/miraikakaku-docker/batch-stable:latest"
            entrypoint: "/bin/bash"
            commands:
              - "-c"
              - |
                echo "üí∞ ‰æ°Ê†º„Éá„Éº„ÇøË£úÂ°´„Éê„ÉÉ„ÉÅÈñãÂßã..."
                cd /app
                
                pip install psycopg2-binary yfinance
                
                python3 -c "
                import psycopg2
                import yfinance as yf
                import numpy as np
                from datetime import datetime, timedelta
                import json
                import random
                
                db_config = {
                    'host': '34.173.9.214',
                    'user': 'miraikakaku-user',
                    'password': 'miraikakaku-secure-pass-2024',
                    'database': 'miraikakaku',
                    'port': 5432
                }
                
                try:
                    connection = psycopg2.connect(**db_config)
                    cursor = connection.cursor()
                    print('‚úÖ PostgreSQLÊé•Á∂öÊàêÂäü')
                    
                    # Êó¢Â≠ò„ÅÆstock_predictions„Åã„ÇâÈäòÊüÑ‰∏ÄË¶ßÂèñÂæó
                    cursor.execute('SELECT DISTINCT symbol FROM stock_predictions ORDER BY symbol')
                    existing_symbols = [row[0] for row in cursor.fetchall()]
                    
                    print(f'üìä ÂØæË±°ÈäòÊüÑ: {len(existing_symbols)}ÈäòÊüÑ')
                    print(f'ÈäòÊüÑ„É™„Çπ„Éà: {\", \".join(existing_symbols[:10])}...')
                    
                    # stock_price_history„ÉÜ„Éº„Éñ„É´„ÅÆÂ≠òÂú®Á¢∫Ë™ç„Éª‰ΩúÊàê
                    cursor.execute('''
                        CREATE TABLE IF NOT EXISTS stock_price_history (
                            id SERIAL PRIMARY KEY,
                            symbol VARCHAR(20) NOT NULL,
                            date DATE NOT NULL,
                            open_price DECIMAL(10,2),
                            high_price DECIMAL(10,2),
                            low_price DECIMAL(10,2),
                            close_price DECIMAL(10,2),
                            volume BIGINT,
                            adjusted_close DECIMAL(10,2),
                            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                            UNIQUE(symbol, date)
                        )
                    ''')
                    
                    cursor.execute('''
                        CREATE INDEX IF NOT EXISTS idx_stock_price_symbol_date 
                        ON stock_price_history(symbol, date)
                    ''')
                    
                    connection.commit()
                    print('‚úÖ stock_price_history„ÉÜ„Éº„Éñ„É´Ê∫ñÂÇôÂÆå‰∫Ü')
                    
                    total_inserted = 0
                    
                    # ÂêÑÈäòÊüÑ„ÅÆ‰æ°Ê†º„Éá„Éº„Çø„ÇíË£úÂ°´
                    for i, symbol in enumerate(existing_symbols):
                        print(f'\\nüìà {symbol} ‰æ°Ê†º„Éá„Éº„ÇøÂèñÂæó‰∏≠... ({i+1}/{len(existing_symbols)})')
                        
                        try:
                            # 2Âπ¥ÂàÜ„ÅÆÂÆü„Éá„Éº„ÇøÂèñÂæó„ÇíË©¶Ë°å
                            ticker = yf.Ticker(symbol)
                            hist = ticker.history(period='2y', interval='1d')
                            
                            if not hist.empty:
                                # ÂÆü„Éá„Éº„Çø„Åå„ÅÇ„ÇãÂ†¥Âêà
                                print(f'üí∞ {symbol}: {len(hist)}Êó•ÂàÜ„ÅÆÂÆü„Éá„Éº„ÇøÂèñÂæó')
                                
                                for date_idx, (date, row) in enumerate(hist.iterrows()):
                                    try:
                                        insert_sql = '''
                                            INSERT INTO stock_price_history 
                                            (symbol, date, open_price, high_price, low_price, close_price, volume, adjusted_close)
                                            VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
                                            ON CONFLICT (symbol, date) DO NOTHING
                                        '''
                                        
                                        cursor.execute(insert_sql, (
                                            symbol,
                                            date.date(),
                                            float(row['Open']) if not np.isnan(row['Open']) else None,
                                            float(row['High']) if not np.isnan(row['High']) else None,
                                            float(row['Low']) if not np.isnan(row['Low']) else None,
                                            float(row['Close']) if not np.isnan(row['Close']) else None,
                                            int(row['Volume']) if not np.isnan(row['Volume']) else 0,
                                            float(row['Close']) if not np.isnan(row['Close']) else None
                                        ))
                                        total_inserted += 1
                                        
                                    except Exception as e:
                                        continue
                            else:
                                # ÂÆü„Éá„Éº„Çø„ÅåÂèñÂæó„Åß„Åç„Å™„ÅÑÂ†¥Âêà„ÅØ„ÉÄ„Éü„Éº„Éá„Éº„ÇøÁîüÊàê
                                print(f'üí° {symbol}: „ÉÄ„Éü„Éº‰æ°Ê†º„Éá„Éº„ÇøÁîüÊàê')
                                
                                # Ê•≠Á®ÆÂà•Âü∫Ê∫ñ‰æ°Ê†ºË®≠ÂÆö
                                if symbol in ['JPM', 'BAC', 'V', 'MA']:  # ÈáëËûç
                                    base_price = 200.0
                                elif symbol in ['XOM', 'CVX']:  # „Ç®„Éç„É´„ÇÆ„Éº
                                    base_price = 120.0
                                elif symbol in ['AAPL', 'GOOGL', 'MSFT', 'AMZN', 'NVDA']:  # Â§ßÊâã„ÉÜ„ÉÉ„ÇØ
                                    base_price = 180.0
                                elif symbol in ['KO', 'PEP', 'WMT']:  # Ê∂àË≤ªË≤°
                                    base_price = 80.0
                                else:  # „Åù„ÅÆ‰ªñ
                                    base_price = 150.0
                                
                                current_price = base_price + np.random.uniform(-50, 100)
                                
                                # 2Âπ¥ÂàÜ„ÅÆ„ÉÄ„Éü„Éº„Éá„Éº„ÇøÁîüÊàê
                                start_date = datetime.now() - timedelta(days=730)
                                for day_offset in range(0, 730, 1):
                                    date = start_date + timedelta(days=day_offset)
                                    
                                    # Âπ≥Êó•„ÅÆ„ÅøÔºàÂúüÊó•„Çπ„Ç≠„ÉÉ„ÉóÔºâ
                                    if date.weekday() >= 5:
                                        continue
                                    
                                    # ‰æ°Ê†ºÂ§âÂãïÔºà„É™„Ç¢„É´„Å™ÂÄ§Âãï„ÅçÔºâ
                                    daily_change = np.random.normal(0, 0.02)  # Âπ≥Âùá0%, Ê®ôÊ∫ñÂÅèÂ∑Æ2%
                                    current_price *= (1 + daily_change)
                                    current_price = max(1.0, current_price)  # ÊúÄ‰Ωé1„Éâ„É´
                                    
                                    open_price = current_price * (1 + np.random.uniform(-0.01, 0.01))
                                    high_price = max(open_price, current_price) * (1 + np.random.uniform(0, 0.02))
                                    low_price = min(open_price, current_price) * (1 - np.random.uniform(0, 0.02))
                                    close_price = current_price
                                    volume = int(np.random.lognormal(15, 1))  # „É™„Ç¢„É´„Å™„Éú„É™„É•„Éº„É†ÂàÜÂ∏É
                                    
                                    try:
                                        insert_sql = '''
                                            INSERT INTO stock_price_history 
                                            (symbol, date, open_price, high_price, low_price, close_price, volume, adjusted_close)
                                            VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
                                            ON CONFLICT (symbol, date) DO NOTHING
                                        '''
                                        
                                        cursor.execute(insert_sql, (
                                            symbol,
                                            date.date(),
                                            round(open_price, 2),
                                            round(high_price, 2),
                                            round(low_price, 2),
                                            round(close_price, 2),
                                            volume,
                                            round(close_price, 2)
                                        ))
                                        total_inserted += 1
                                        
                                    except Exception as e:
                                        continue
                                        
                        except Exception as e:
                            print(f'‚ö†Ô∏è {symbol}: „Ç®„É©„Éº - {e}')
                            continue
                        
                        # 10ÈäòÊüÑ„Åî„Å®„Å´„Ç≥„Éü„ÉÉ„Éà
                        if (i + 1) % 10 == 0:
                            connection.commit()
                            print(f'üíæ ‰∏≠Èñì„Ç≥„Éü„ÉÉ„Éà ({i+1}/{len(existing_symbols)})')
                    
                    # ÊúÄÁµÇ„Ç≥„Éü„ÉÉ„Éà
                    connection.commit()
                    
                    print('\\n' + '='*60)
                    print('üéâ ‰æ°Ê†º„Éá„Éº„ÇøË£úÂ°´ÂÆå‰∫Ü!')
                    print(f'üìä ÊåøÂÖ•„É¨„Ç≥„Éº„ÉâÊï∞: {total_inserted:,}‰ª∂')
                    print(f'üìà Âá¶ÁêÜÈäòÊüÑÊï∞: {len(existing_symbols)}')
                    
                    # ÊúÄÁµÇÁµ±Ë®à
                    cursor.execute('SELECT COUNT(*), COUNT(DISTINCT symbol) FROM stock_price_history')
                    total_records, unique_symbols = cursor.fetchone()
                    
                    cursor.execute('SELECT DATE(MIN(date)), DATE(MAX(date)) FROM stock_price_history')
                    min_date, max_date = cursor.fetchone()
                    
                    print(f'\\nüìä price_historyÊúÄÁµÇÁµ±Ë®à:')
                    print(f'  - Á∑è„É¨„Ç≥„Éº„ÉâÊï∞: {total_records:,}‰ª∂')
                    print(f'  - ÈäòÊüÑÊï∞: {unique_symbols}')
                    print(f'  - „Éá„Éº„ÇøÊúüÈñì: {min_date} ÔΩû {max_date}')
                    
                    # ‰∫àÊ∏¨„Éá„Éº„Çø„Å®„ÅÆÈÄ£Êê∫Á¢∫Ë™ç
                    cursor.execute('''
                        SELECT COUNT(DISTINCT sp.symbol) 
                        FROM stock_predictions sp 
                        JOIN stock_price_history sph ON sp.symbol = sph.symbol
                    ''')
                    linked_symbols = cursor.fetchone()[0]
                    print(f'  - ‰∫àÊ∏¨ÈÄ£Êê∫ÈäòÊüÑ: {linked_symbols}')
                    
                    connection.close()
                    print('\\n‚úÖ ‰æ°Ê†º„Éá„Éº„ÇøË£úÂ°´„Éê„ÉÉ„ÉÅÂÆå‰∫Ü!')
                    
                except Exception as e:
                    print(f'‚ùå „Ç®„É©„Éº: {e}')
                    import traceback
                    traceback.print_exc()
                "
      computeResource:
        cpuMilli: "8000"
        memoryMib: "16384"
      maxRetryCount: 2
      maxRunDuration: "7200s"
    taskCount: 1
    parallelism: 1

allocationPolicy:
  instances:
    - policy:
        machineType: "e2-standard-8"
  location:
    allowedLocations:
      - "regions/us-central1"

logsPolicy:
  destination: "CLOUD_LOGGING"

labels:
  app: "miraikakaku"
  type: "price-data-filler"
  environment: "production"